Here's a C solution for the Lost & Found Portal:

*Lost & Found Portal*
*Problem Statement*
Create a portal to manage lost and found items, allowing users to add lost items, add found items, and match items based on keywords.

*Code*
```
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ITEMS 100
#define MAX_NAME_LENGTH 50
#define MAX_LOCATION_LENGTH 50
#define MAX_KEYWORD_LENGTH 50

typedef struct {
    char name[MAX_NAME_LENGTH];
    char location[MAX_LOCATION_LENGTH];
} Item;

// Function to add lost item
void add_lost_item(Item lost_items[], int* lost_count) {
    printf("Enter lost item name: ");
    fgets(lost_items[*lost_count].name, MAX_NAME_LENGTH, stdin);
    lost_items[*lost_count].name[strcspn(lost_items[*lost_count].name, "\n")] = 0;
    printf("Enter lost item location: ");
    fgets(lost_items[*lost_count].location, MAX_LOCATION_LENGTH, stdin);
    lost_items[*lost_count].location[strcspn(lost_items[*lost_count].location, "\n")] = 0;
    (*lost_count)++;
}

// Function to add found item
void add_found_item(Item found_items[], int* found_count) {
    printf("Enter found item name: ");
    fgets(found_items[*found_count].name, MAX_NAME_LENGTH, stdin);
    found_items[*found_count].name[strcspn(found_items[*found_count].name, "\n")] = 0;
    printf("Enter found item location: ");
    fgets(found_items[*found_count].location, MAX_LOCATION_LENGTH, stdin);
    found_items[*found_count].location[strcspn(found_items[*found_count].location, "\n")] = 0;
    (*found_count)++;
}

// Function to match items based on keywords
void match_items(Item lost_items[], int lost_count, Item found_items[], int found_count) {
    char keyword[MAX_KEYWORD_LENGTH];
    printf("Enter keyword to search: ");
    fgets(keyword, MAX_KEYWORD_LENGTH, stdin);
    keyword[strcspn(keyword, "\n")] = 0;

    printf("Matching lost items:\n");
    for (int i = 0; i < lost_count; i++) {
        if (strstr(lost_items[i].name, keyword) != NULL || strstr(lost_items[i].location, keyword) != NULL) {
            printf("Name: %s, Location: %s\n", lost_items[i].name, lost_items[i].location);
        }
    }

    printf("Matching found items:\n");
    for (int i = 0; i < found_count; i++) {
        if (strstr(found_items[i].name, keyword) != NULL || strstr(found_items[i].location, keyword) != NULL) {
            printf("Name: %s, Location: %s\n", found_items[i].name, found_items[i].location);
        }
    }
}

int main() {
    Item lost_items[MAX_ITEMS];
    Item found_items[MAX_ITEMS];
    int lost_count = 0;
    int found_count = 0;

    while (1) {
        printf("1. Add lost item\n");
        printf("2. Add found item\n");
        printf("3. Match items\n");
        printf("4. Exit\n");
        int choice;
        scanf("%d", &choice);
        getchar(); // Consume newline character

        switch (choice) {
            case 1:
                add_lost_item(lost_items, &lost_count);
                break;
            case 2:
                add_found_item(found_items, &found_count);
                break;
            case 3:
                match_items(lost_items, lost_count, found_items, found_count);
                break;
            case 4:
                return 0;
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
```

*Output*
The output will be a menu-driven interface allowing users to add lost items, add found items, and match items based on keywords.

Example output:

```
1. Add lost item
2. Add found item
3. Match items
4. Exit
1
Enter lost item name: Phone
Enter lost item location: Library
1. Add lost item
2. Add found item
3. Match items
4. Exit
2
Enter found item name: Phone
Enter found item location: Cafeteria
1. Add lost item
2. Add found item
3. Match items
4. Exit
3
Enter keyword to search: Phone
Matching lost items:
Name: Phone, Location: Library
Matching found items:
Name: Phone, Location: Cafeteria
```